import{_ as e,c as a,o as r,a2 as t}from"./chunks/framework.4_bZ6nyl.js";const u=JSON.parse('{"title":"團隊開發模式導入","description":"","frontmatter":{},"headers":[],"relativePath":"WorkSkill/團隊開發模式導入.md","filePath":"WorkSkill/團隊開發模式導入.md"}'),o={name:"WorkSkill/團隊開發模式導入.md"},i=t('<h1 id="團隊開發模式導入" tabindex="-1">團隊開發模式導入 <a class="header-anchor" href="#團隊開發模式導入" aria-label="Permalink to &quot;團隊開發模式導入&quot;">​</a></h1><h6 id="tags-工作" tabindex="-1">tags: <code>工作</code> <a class="header-anchor" href="#tags-工作" aria-label="Permalink to &quot;tags: `工作`&quot;">​</a></h6><nav class="table-of-contents"><ul><li><a href="#restful-api">RESTful API</a></li><li><a href="#code-review">Code Review</a></li><li><a href="#自動化測試">自動化測試</a></li><li><a href="#技術文件">技術文件</a></li></ul></nav><p>今天有同事要離職了，離開前做了一份心得+交接報告 裡面有提了一個大點，是目前團隊急需要改進的 在未來的開發模式中，我是希望漸漸導入這些工具或概念 時代在走，雖然跟不上潮流，但這些工具都是經過驗證的 對於系統的開發、維護上，一定會有實質上的幫助</p><p><strong>版本控制</strong>使用版本控至的優點，可以在部屬新版本的程式時 若發生錯誤，可以馬上回復上一個版本 另外也可以避免多個人同時改到同一支程式 可以做Conflict的Merge處理 版本控制目前常用的有git和svn git是分散式，每個本機都會建置Repository 沒有網路還是可以commit，查看歷史紀錄</p><p>svn是集中式的，全部都必須倚賴server 如果server壞掉，就不能在commit程式 不過svn的權限控制比較完整 目前企業界比較多人使用 <a href="https://shaurong.blogspot.com/2018/07/tortoisesvn-110-x64-apache-svn-server.html" target="_blank" rel="noreferrer">svn server建置參考</a></p><h2 id="restful-api" tabindex="-1">RESTful API <a class="header-anchor" href="#restful-api" aria-label="Permalink to &quot;RESTful API&quot;">​</a></h2><p>開發時使用RESTful的寫法，有助於維護 透過看HTTP Method大概可以知道用途 (GET、POST、PUT、PATCH、DELETE) 另外寫 API 方便，寫測試方便，產生文件方便</p><h2 id="code-review" tabindex="-1">Code Review <a class="header-anchor" href="#code-review" aria-label="Permalink to &quot;Code Review&quot;">​</a></h2><p>優點是<a href="https://ithelp.ithome.com.tw/articles/10202760" target="_blank" rel="noreferrer">可以分散維護風險，讓其他人能接手</a> 另外透過Code Review的方式，也能讓團隊討論制定標準 一起互相檢視彼此的程式碼，給出最低 Code Review 通過標準</p><h2 id="自動化測試" tabindex="-1">自動化測試 <a class="header-anchor" href="#自動化測試" aria-label="Permalink to &quot;自動化測試&quot;">​</a></h2><p>當新版本程式上版時，若有自動化測試 可以免除改A壞B的問題，可以做基本過濾 撰寫自動化測試需要額外的時間(可能跟開發相當) 但自動化可以重複利用，可以減少重複測試時間</p><h2 id="技術文件" tabindex="-1">技術文件 <a class="header-anchor" href="#技術文件" aria-label="Permalink to &quot;技術文件&quot;">​</a></h2><p>有技術文件的優點可以讓未涉足該領域的開發人員 透過技術文件的範例解說，能快速上手 也能熟悉專案使用技術，資訊技術透明化 而不是自己花時間摸索嘗試錯誤中走出路來</p>',14),l=[i];function s(n,h,c,d,_,p){return r(),a("div",null,l)}const m=e(o,[["render",s]]);export{u as __pageData,m as default};
